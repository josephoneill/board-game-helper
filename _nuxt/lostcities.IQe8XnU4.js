var N=Object.defineProperty;var $=(t,e,o)=>e in t?N(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o;var r=(t,e,o)=>($(t,typeof e!="symbol"?e+"":e,o),o);import{d as S,r as f,c as P,v as w,x as g,y as h,F as W,G as B,C as O,z as b,H as G,I,A as x,J as p}from"./entry.RO_GAltN.js";var y=(t=>(t[t.TWO=2]="TWO",t[t.THREE=3]="THREE",t[t.FOUR=4]="FOUR",t[t.FIVE=5]="FIVE",t[t.SIX=6]="SIX",t[t.SEVEN=7]="SEVEN",t[t.EIGHT=8]="EIGHT",t[t.NINE=9]="NINE",t[t.TEN=10]="TEN",t[t.WAGER=11]="WAGER",t))(y||{}),i=(t=>(t[t.YELLOW=0]="YELLOW",t[t.WHITE=1]="WHITE",t[t.BLUE=2]="BLUE",t[t.GREEN=3]="GREEN",t[t.RED=4]="RED",t[t.PURPLE=5]="PURPLE",t))(i||{});const U=20,H=-20;class _{constructor(e=[]){r(this,"cardEntries");this.cardEntries=e}addCardEntry(e){if(this.cardEntries.includes(e)&&e!==11)throw new Error(`Cannot add duplicate card (${e}) to expedition!`);if(e===11&&this.getWagerCards().length>=3)throw new Error("Cannot add more than 3 wager cards!");this.cardEntries.push(e)}removeCardEntry(e){if(!this.cardEntries.includes(e))throw new Error(`Cannot remove card. Card ${e} does not exist!`);this.cardEntries.splice(this.cardEntries.indexOf(e),1)}getWagerCards(){return this.cardEntries.filter(e=>e===11)}getScore(){if(this.cardEntries.length===0)return 0;let e=0;const o=this.cardEntries.filter(d=>d!==11),n=this.getWagerCards();let a=H;return o.forEach(d=>{a+=d}),a*=n.length+1,e+=a,this.cardEntries.length>=8&&(e+=U),e}}class Y{constructor(){r(this,"yellow",0);r(this,"white",0);r(this,"blue",0);r(this,"green",0);r(this,"red",0);r(this,"purple",0)}}class V{constructor(){r(this,"yellowExpedition");r(this,"whiteExpedition");r(this,"blueExpedition");r(this,"greenExpedition");r(this,"redExpedition");r(this,"purpleExpedition");this.yellowExpedition=new _,this.whiteExpedition=new _,this.blueExpedition=new _,this.greenExpedition=new _,this.redExpedition=new _,this.purpleExpedition=new _}addCard(e,o){e.addCardEntry(o)}removeCard(e,o){e.removeCardEntry(o)}addYellowExpeditionCard(e){this.addCard(this.yellowExpedition,e)}removeYellowExpeditionCard(e){this.removeCard(this.yellowExpedition,e)}addWhiteExpeditionCard(e){this.addCard(this.whiteExpedition,e)}removeWhiteExpeditionCard(e){this.removeCard(this.whiteExpedition,e)}addBlueExpeditionCard(e){this.addCard(this.blueExpedition,e)}removeBlueExpeditionCard(e){this.removeCard(this.blueExpedition,e)}addGreenExpeditionCard(e){this.addCard(this.greenExpedition,e)}removeGreenExpeditionCard(e){this.removeCard(this.greenExpedition,e)}addRedExpeditionCard(e){this.addCard(this.redExpedition,e)}removeRedExpeditionCard(e){this.removeCard(this.redExpedition,e)}addPurpleExpeditionCard(e){this.addCard(this.purpleExpedition,e)}removePurpleExpeditionCard(e){this.removeCard(this.purpleExpedition,e)}getScoreBreakdown(){const e=this.yellowExpedition.getScore(),o=this.whiteExpedition.getScore(),n=this.blueExpedition.getScore(),a=this.greenExpedition.getScore(),d=this.redExpedition.getScore(),l=this.purpleExpedition.getScore();return{yellow:e,white:o,blue:n,green:a,red:d,purple:l}}getScore(e=null){const o=e??this.getScoreBreakdown();return Object.values(o).reduce((a,d)=>a+d,0)}}class F{constructor(){r(this,"lostCitiesRound");this.lostCitiesRound=new V}addCard(e){const{card:o,expeditionType:n}=e;switch(n){case i.YELLOW:{this.lostCitiesRound.addYellowExpeditionCard(o);break}case i.WHITE:{this.lostCitiesRound.addWhiteExpeditionCard(o);break}case i.BLUE:{this.lostCitiesRound.addBlueExpeditionCard(o);break}case i.GREEN:{this.lostCitiesRound.addGreenExpeditionCard(o);break}case i.RED:{this.lostCitiesRound.addRedExpeditionCard(o);break}case i.PURPLE:{this.lostCitiesRound.addPurpleExpeditionCard(o);break}}}removeCard(e){const{card:o,expeditionType:n}=e;switch(n){case i.YELLOW:{this.lostCitiesRound.removeYellowExpeditionCard(o);break}case i.WHITE:{this.lostCitiesRound.removeWhiteExpeditionCard(o);break}case i.BLUE:{this.lostCitiesRound.removeBlueExpeditionCard(o);break}case i.GREEN:{this.lostCitiesRound.removeGreenExpeditionCard(o);break}case i.RED:{this.lostCitiesRound.removeRedExpeditionCard(o);break}case i.PURPLE:{this.lostCitiesRound.removePurpleExpeditionCard(o);break}}}getScoreBreakdown(){return this.lostCitiesRound.getScoreBreakdown()}getScore(e){return this.lostCitiesRound.getScore(e)}}const D={class:"lost-city-expedition"},A={class:"card__container"},q=["onClick"],z=h("span",{class:"card-button__text card-button__text--top"},"W",-1),K=h("span",{class:"card-button__text card-button__text--bottom"},"W",-1),M=[z,K],X=["onClick"],j={class:"card-button__text card-button__text--top face-card-button__text"},J={class:"card-button__text card-button__text--bottom face-card-button__text"},Q=h("hr",null,null,-1),v=S({__name:"LostCitiesExpedition",props:{expeditionType:{type:Number,default:i.YELLOW,required:!0},score:{type:Number,default:0,required:!0},color:{type:String,default:"initial",required:!0},textColor:{type:String,default:"white",required:!1}},emits:["add-card","remove-card"],setup(t,{emit:e}){const o=e,n=t,a=["two","three","four","five","six","seven","eight","nine","ten"];class d{constructor(){r(this,"one",!1);r(this,"two",!1);r(this,"three",!1);r(this,"four",!1);r(this,"five",!1);r(this,"six",!1);r(this,"seven",!1);r(this,"eight",!1);r(this,"nine",!1);r(this,"ten",!1);r(this,"wager",[!1,!1,!1])}}const l=f(new d);function C(u){return a[u-2]}function m(u,c=!1,s=0){const E=C(u),R=i[n.expeditionType].toLowerCase();return c?l.value.wager[s]:l.value[E],{"--card-background":`url(/board-game-helper/img/${R}_card.png) no-repeat`,"--card-text-color":n.textColor,"--card-hover-color":n.color}}const k=P(()=>{const u=new Map;for(let c=2;c<=10;c++){const s=C(c),E=l.value[s];u.set(c,{"card-button":!0,"face-card-button":!0,"card-button--selected":E})}for(let c=1;c<=3;c++){const s=l.value.wager[c-1];u.set(`wager-${c}`,{"card-button":!0,"wager-card-button":!0,"card-button--selected":s})}return u});function L(u,c=!1){const s=C(u),E=c?l.value.wager[u]:l.value[s],R=E;c?l.value.wager[u]=!E:l.value[s]=!E;const T=c?y.WAGER:y[s.toUpperCase()];R?o("remove-card",{card:T,expeditionType:n.expeditionType}):o("add-card",{card:T,expeditionType:n.expeditionType})}return(u,c)=>(w(),g("div",D,[h("div",A,[(w(),g(W,null,B(3,s=>h("button",{key:`wager-card-button-${s}`,class:G(k.value.get(`wager-${s}`)),style:I(m(s-1,!0)),onClick:E=>L(s-1,!0)},M,14,q)),64)),(w(),g(W,null,B(9,s=>h("button",{key:`face-card-button-${s}`,class:G(k.value.get(s+1)),style:I(m(s+1)),onClick:E=>L(s+1)},[h("span",j,b(s+1),1),h("span",J,b(s+1),1)],14,X)),64))]),Q,O(" Score: "+b(t.score),1)]))}}),Z={class:"toolbar"},ee={class:"toolbar-title"},te=S({__name:"Toolbar",setup(t){const e=f("Lost Cities Calculator");return(o,n)=>(w(),g("div",Z,[h("span",ee,b(e.value),1)]))}}),oe={class:"lost-cities-container"},re={class:"lost-cities__expeditions"},se={class:"lost-city__score-container"},ae=S({__name:"lostcities",setup(t){const e=f(0),o=f(new Y),n=new F;function a(C){n.addCard(C),l()}function d(C){n.removeCard(C),l()}function l(){o.value=n.getScoreBreakdown(),e.value=n.getScore(o.value)}return(C,m)=>(w(),g("div",null,[x(p(te)),h("div",oe,[h("div",re,[x(p(v),{expeditionType:p(i).YELLOW,score:o.value.yellow,color:"#fbbb23",textColor:"black",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"]),x(p(v),{expeditionType:p(i).WHITE,score:o.value.white,color:"#d2dcd9",textColor:"black",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"]),x(p(v),{expeditionType:p(i).BLUE,score:o.value.blue,color:"#2b60a0",textColor:"white",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"]),x(p(v),{expeditionType:p(i).GREEN,score:o.value.green,color:"#37a31b",textColor:"white",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"]),x(p(v),{expeditionType:p(i).RED,score:o.value.red,color:"#db3e17",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"]),x(p(v),{expeditionType:p(i).PURPLE,score:o.value.purple,color:"#524286",onAddCard:a,onRemoveCard:d},null,8,["expeditionType","score"])])]),h("div",se,[h("p",null,"Total Score: "+b(e.value),1)])]))}});export{ae as default};
